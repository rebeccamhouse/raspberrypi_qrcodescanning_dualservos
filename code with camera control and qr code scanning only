import os
import subprocess
import rclpy
from rclpy.node import Node
import cv2
import webbrowser
import time
from adafruit_pca9685 import PCA9685
import board
import busio
from pyzbar.pyzbar import decode
import RPi.GPIO as GPIO  # Import GPIO library for buzzer control


def setup_environment():
    """
    Set up the environment by activating a virtual environment
    and adjusting permissions for I2C and GPIO.
    """
    venv_path = "/home/rebecca/opencv_env/bin/activate"

    # Activate virtual environment if not already active
    if os.environ.get('VIRTUAL_ENV') != venv_path:
        print(f"Activating virtual environment: {venv_path}")
        subprocess.run(f"source {venv_path}", shell=True, executable="/bin/bash")

    # Adjust I2C permissions
    try:
        print("Adjusting I2C permissions...")
        subprocess.run(["sudo", "chown", ":i2c", "/dev/i2c-1"], check=True)
        subprocess.run(["sudo", "chmod", "g+rw", "/dev/i2c-1"], check=True)
        print("I2C permissions adjusted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error adjusting I2C permissions: {e}")

    # Adjust GPIO permissions
    try:
        print("Adjusting GPIO permissions...")
        subprocess.run(["sudo", "chown", "root:gpio", "/dev/gpiomem"], check=True)
        subprocess.run(["sudo", "chmod", "g+rw", "/dev/gpiomem"], check=True)
        print("GPIO permissions adjusted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error adjusting GPIO permissions: {e}")


class QRCodeScanner(Node):
    def __init__(self):
        super().__init__('qr_code_scanner')

        # Initialize I2C and PCA9685
        i2c = busio.I2C(board.SCL, board.SDA)
        self.pca = PCA9685(i2c)
        self.pca.frequency = 50  # Frequency for servo control

        # Define channels for tilt and swivel servos
        self.tilt_channel = 0
        self.swivel_channel = 1

        # Define tilt and swivel servo angle ranges
        self.tilt_min = 0
        self.tilt_max = 72
        self.swivel_min = 0
        self.swivel_max = 90

        # Initialize servo angles
        self.tilt_angle = 0  # Initial tilt angle
        self.swivel_angle = 90  # Initial swivel angle

        # Set initial servo positions
        self.set_servo_angle(self.tilt_channel, self.tilt_angle, self.tilt_min, self.tilt_max)
        self.set_servo_angle(self.swivel_channel, self.swivel_angle, self.swivel_min, self.swivel_max)

        # Initialize camera
        self.cap = cv2.VideoCapture(0)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

        if not self.cap.isOpened():
            self.get_logger().error("Unable to open camera")
        else:
            self.get_logger().info("Camera opened successfully")

        # Initialize buzzer
        self.buzzer_pin = 18  # GPIO pin connected to the buzzer
        GPIO.setmode(GPIO.BCM)  # Use Broadcom GPIO numbering
        GPIO.setup(self.buzzer_pin, GPIO.OUT)  # Set buzzer pin as output
        GPIO.output(self.buzzer_pin, GPIO.LOW)  # Ensure buzzer is off initially

    def set_servo_angle(self, channel, angle, min_angle, max_angle):
        """
        Ensure the angle is within the servo's range and set the servo.
        """
        angle = max(min_angle, min(max_angle, angle))
        pulse_min = 0x1000  # Minimum pulse width
        pulse_max = 0x3000  # Maximum pulse width
        pulse = int((angle / 180.0) * (pulse_max - pulse_min) + pulse_min)
        self.pca.channels[channel].duty_cycle = pulse
        self.get_logger().info(f"Set servo on channel {channel} to angle {angle} degrees")

    def scan_qr_code(self):
        """
        Continuously scan for QR codes and adjust camera position if none are detected.
        """
        found = False

        while not found:
            ret, frame = self.cap.read()
            if not ret:
                self.get_logger().error("Failed to grab frame from camera")
                break

            # Detect QR codes using pyzbar
            decoded_objects = decode(frame)

            if decoded_objects:
                for obj in decoded_objects:
                    decoded_text = obj.data.decode('utf-8')
                    self.get_logger().info(f"QR Code detected: {decoded_text}")

                    # Activate buzzer
                    self.activate_buzzer()

                    # Check if the decoded text is a URL
                    if decoded_text.startswith("http://") or decoded_text.startswith("https://"):
                        self.get_logger().info(f"Opening URL: {decoded_text}")
                        webbrowser.open(decoded_text)
                    else:
                        print(f"QR Code Text: {decoded_text}")

                    found = True  # Stop scanning when QR code is detected
                    break
            else:
                self.get_logger().info("No QR Code detected in this frame")
                self.adjust_camera_position()  # Adjust the servo position

            # Display the frame (optional for visual feedback)
            cv2.imshow('QR Code Scanner', frame)

            # Break loop on 'q' key press (useful for testing)
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    def activate_buzzer(self):
        """
        Activate and deactivate the buzzer to signal QR code detection.
        """
        GPIO.output(self.buzzer_pin, GPIO.HIGH)
        self.get_logger().info("Buzzer activated")
        time.sleep(0.5)
        GPIO.output(self.buzzer_pin, GPIO.LOW)
        self.get_logger().info("Buzzer deactivated")

    def adjust_camera_position(self):
        """
        Adjust the tilt and swivel angles of the camera for better scanning.
        """
        if self.tilt_angle + 5 <= self.tilt_max:
            self.tilt_angle += 5
        else:
            self.tilt_angle = self.tilt_min
            if self.swivel_angle + 10 <= self.swivel_max:
                self.swivel_angle += 10
            else:
                self.swivel_angle = self.swivel_min

        self.get_logger().info(f"Moving tilt servo to {self.tilt_angle} degrees and swivel servo to {self.swivel_angle} degrees")
        self.set_servo_angle(self.tilt_channel, self.tilt_angle, self.tilt_min, self.tilt_max)
        self.set_servo_angle(self.swivel_channel, self.swivel_angle, self.swivel_min, self.swivel_max)
        time.sleep(0.5)

    def cleanup(self):
        """
        Release all resources before exiting.
        """
        self.cap.release()
        self.pca.deinit()
        GPIO.cleanup()
        cv2.destroyAllWindows()


def main(args=None):
    rclpy.init(args=args)
    node = QRCodeScanner()

    try:
        node.scan_qr_code()
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down QR code scanner...")
    finally:
        node.cleanup()
        if rclpy.ok():
            rclpy.shutdown()


if __name__ == "__main__":
    main()
