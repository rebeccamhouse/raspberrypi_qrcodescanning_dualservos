import os
import subprocess
import rclpy
from rclpy.node import Node
import cv2
import webbrowser
import time
from adafruit_pca9685 import PCA9685
import board
import busio
from pyzbar.pyzbar import decode
import RPi.GPIO as GPIO


def setup_environment():
    """
    Set up the environment by activating a virtual environment
    and adjusting permissions for I2C and GPIO.
    """
    venv_path = "/home/rebecca/opencv_env/bin/activate"

    # Activate virtual environment if not already active
    if os.environ.get('VIRTUAL_ENV') != venv_path:
        print(f"Activating virtual environment: {venv_path}")
        subprocess.run(f"source {venv_path}", shell=True, executable="/bin/bash")

    # Adjust I2C permissions
    try:
        print("Adjusting I2C permissions...")
        subprocess.run(["sudo", "chown", ":i2c", "/dev/i2c-1"], check=True)
        subprocess.run(["sudo", "chmod", "g+rw", "/dev/i2c-1"], check=True)
        print("I2C permissions adjusted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error adjusting I2C permissions: {e}")

    # Adjust GPIO permissions
    try:
        print("Adjusting GPIO permissions...")
        subprocess.run(["sudo", "chown", "root:gpio", "/dev/gpiomem"], check=True)
        subprocess.run(["sudo", "chmod", "g+rw", "/dev/gpiomem"], check=True)
        print("GPIO permissions adjusted successfully.")
    except subprocess.CalledProcessError as e:
        print(f"Error adjusting GPIO permissions: {e}")


class QRCodeScanner(Node):
    def __init__(self):
        super().__init__('qr_code_scanner')

        # Initialize I2C and PCA9685 for servo control
        i2c = busio.I2C(board.SCL, board.SDA)
        self.pca = PCA9685(i2c)
        self.pca.frequency = 50

        # Servo channels and angle ranges
        self.tilt_channel = 0
        self.swivel_channel = 1
        self.tilt_min = 0
        self.tilt_max = 72
        self.swivel_min = 0
        self.swivel_max = 90

        # Initialize servo angles
        self.tilt_angle = 0
        self.swivel_angle = 90
        self.set_servo_angle(self.tilt_channel, self.tilt_angle, self.tilt_min, self.tilt_max)
        self.set_servo_angle(self.swivel_channel, self.swivel_angle, self.swivel_min, self.swivel_max)

        # Initialize camera
        self.cap = cv2.VideoCapture(0)
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)
        if not self.cap.isOpened():
            self.get_logger().error("Unable to open camera")
        else:
            self.get_logger().info("Camera opened successfully")

        # Initialize GPIO
        GPIO.setmode(GPIO.BCM)
        self.buzzer_pin = 18
        GPIO.setup(self.buzzer_pin, GPIO.OUT)
        GPIO.output(self.buzzer_pin, GPIO.LOW)

        self.input_signal_pin = 23
        self.output_signal_pin = 24
        self.touchscreen_pin = 25
        GPIO.setup(self.input_signal_pin, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)
        GPIO.setup(self.output_signal_pin, GPIO.OUT)
        GPIO.setup(self.touchscreen_pin, GPIO.OUT)

        # Target QR code
        self.target_command = "Patient 1"

    def set_servo_angle(self, channel, angle, min_angle, max_angle):
        """
        Set servo angle within the specified range.
        """
        angle = max(min_angle, min(max_angle, angle))
        pulse_min = 0x1000
        pulse_max = 0x3000
        pulse = int((angle / 180.0) * (pulse_max - pulse_min) + pulse_min)
        self.pca.channels[channel].duty_cycle = pulse
        self.get_logger().info(f"Set servo on channel {channel} to angle {angle} degrees")

    def activate_buzzer(self):
        """
        Activate the buzzer to indicate a successful QR code scan.
        """
        GPIO.output(self.buzzer_pin, GPIO.HIGH)
        self.get_logger().info("Buzzer activated")
        time.sleep(0.5)
        GPIO.output(self.buzzer_pin, GPIO.LOW)
        self.get_logger().info("Buzzer deactivated")

    def send_signal_to_arduino(self):
        """
        Send a signal to the Arduino for further action.
        """
        GPIO.output(self.output_signal_pin, GPIO.HIGH)
        time.sleep(0.1)
        GPIO.output(self.output_signal_pin, GPIO.LOW)
        self.get_logger().info("Signal sent to Arduino")

    def perform_camera_cycle(self):
        """
        Scan for QR codes by adjusting servo angles and capturing frames.
        """
        for tilt in range(self.tilt_min, self.tilt_max + 1, 5):
            self.set_servo_angle(self.tilt_channel, tilt, self.tilt_min, self.tilt_max)
            for swivel in range(self.swivel_min, self.swivel_max + 1, 10):
                self.set_servo_angle(self.swivel_channel, swivel, self.swivel_min, self.swivel_max)
                ret, frame = self.cap.read()
                if not ret:
                    self.get_logger().error("Failed to grab frame from camera")
                    continue

                decoded_objects = decode(frame)
                if decoded_objects:
                    for obj in decoded_objects:
                        decoded_text = obj.data.decode('utf-8')
                        self.get_logger().info(f"QR Code detected: {decoded_text}")
                        if decoded_text == self.target_command:
                            self.activate_buzzer()
                            return True
                        else:
                            self.get_logger().info("Incorrect QR Code detected")
        self.get_logger().info("No QR Code detected after cycle")
        return False

    def scan_qr_code(self):
        """
        Wait for a start signal and scan for QR codes.
        """
        while True:
            if GPIO.input(self.input_signal_pin) == GPIO.HIGH:
                self.get_logger().info("Start signal received")
                found = self.perform_camera_cycle()
                if not found:
                    self.send_signal_to_arduino()

    def cleanup(self):
        """
        Cleanup resources (camera, GPIO, etc.) before exiting.
        """
        self.cap.release()
        self.pca.deinit()
        GPIO.cleanup()
        cv2.destroyAllWindows()


def main(args=None):
    setup_environment()
    rclpy.init(args=args)
    node = QRCodeScanner()

    try:
        node.scan_qr_code()
    except KeyboardInterrupt:
        node.get_logger().info("Shutting down QR Code Scanner")
    finally:
        node.cleanup()
        if rclpy.ok():
            rclpy.shutdown()


if __name__ == "__main__":
    main()
